
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftIGUALQUEleftMAYORMENORleftMASMENOSleftMULTIPLICACIONDIVISIONCONSOLE DECIMAL DIVISION DOSPT ENTERO ID IGUAL IGUALQUE LET LLAVEDER LLAVEIZQ LOG MAS MAYOR MENOR MENOS MULTIPLICACION PARDER PARIZQ PTCOMA PUNTO RBOOLEAN RFLOAT RINT RSTRING RWHILE STRINGinitial : instructionsinstructions : instructions instruction\n                    | instruction\n    instruction  : consoleLog\n                    | declaration\n                    | whileSt\n    block    : LLAVEIZQ instructions LLAVEDER\n                | LLAVEIZQ LLAVEDER\n    whileSt  : RWHILE PARIZQ exp PARDER block \n    consoleLog : CONSOLE PUNTO LOG PARIZQ exp PARDER PTCOMA\n    declaration  : LET ID DOSPT typeDef IGUAL exp PTCOMA\n    typeDef  : RSTRING\n                | RINT\n                | RFLOAT\n                | RBOOLEAN\n    exp  : exp MAS exp\n            | exp MENOS exp\n            | exp MULTIPLICACION exp\n            | exp DIVISION exp\n            | exp MAYOR exp\n            | exp MENOR exp\n            | exp IGUALQUE exp\n    exp : PARIZQ exp PARDERexp  : ENTERO\n    exp  : DECIMAL\n    exp  : STRING\n    exp  : ID\n    '
    
_lr_action_items = {'CONSOLE':([0,2,3,4,5,6,10,40,41,51,52,53,54,55,],[7,7,-3,-4,-5,-6,-2,-9,7,7,-8,-10,-11,-7,]),'LET':([0,2,3,4,5,6,10,40,41,51,52,53,54,55,],[8,8,-3,-4,-5,-6,-2,-9,8,8,-8,-10,-11,-7,]),'RWHILE':([0,2,3,4,5,6,10,40,41,51,52,53,54,55,],[9,9,-3,-4,-5,-6,-2,-9,9,9,-8,-10,-11,-7,]),'$end':([1,2,3,4,5,6,10,40,52,53,54,55,],[0,-1,-3,-4,-5,-6,-2,-9,-8,-10,-11,-7,]),'LLAVEDER':([3,4,5,6,10,40,41,51,52,53,54,55,],[-3,-4,-5,-6,-2,-9,52,55,-8,-10,-11,-7,]),'PUNTO':([7,],[11,]),'ID':([8,13,16,22,30,31,32,33,34,35,36,38,],[12,21,21,21,21,21,21,21,21,21,21,21,]),'PARIZQ':([9,13,14,16,22,30,31,32,33,34,35,36,38,],[13,16,22,16,16,16,16,16,16,16,16,16,16,]),'LOG':([11,],[14,]),'DOSPT':([12,],[15,]),'ENTERO':([13,16,22,30,31,32,33,34,35,36,38,],[18,18,18,18,18,18,18,18,18,18,18,]),'DECIMAL':([13,16,22,30,31,32,33,34,35,36,38,],[19,19,19,19,19,19,19,19,19,19,19,]),'STRING':([13,16,22,30,31,32,33,34,35,36,38,],[20,20,20,20,20,20,20,20,20,20,20,]),'RSTRING':([15,],[24,]),'RINT':([15,],[25,]),'RFLOAT':([15,],[26,]),'RBOOLEAN':([15,],[27,]),'PARDER':([17,18,19,20,21,28,37,39,42,43,44,45,46,47,48,],[29,-24,-25,-26,-27,39,49,-23,-16,-17,-18,-19,-20,-21,-22,]),'MAS':([17,18,19,20,21,28,37,39,42,43,44,45,46,47,48,50,],[30,-24,-25,-26,-27,30,30,-23,-16,-17,-18,-19,30,30,30,30,]),'MENOS':([17,18,19,20,21,28,37,39,42,43,44,45,46,47,48,50,],[31,-24,-25,-26,-27,31,31,-23,-16,-17,-18,-19,31,31,31,31,]),'MULTIPLICACION':([17,18,19,20,21,28,37,39,42,43,44,45,46,47,48,50,],[32,-24,-25,-26,-27,32,32,-23,32,32,-18,-19,32,32,32,32,]),'DIVISION':([17,18,19,20,21,28,37,39,42,43,44,45,46,47,48,50,],[33,-24,-25,-26,-27,33,33,-23,33,33,-18,-19,33,33,33,33,]),'MAYOR':([17,18,19,20,21,28,37,39,42,43,44,45,46,47,48,50,],[34,-24,-25,-26,-27,34,34,-23,-16,-17,-18,-19,-20,-21,34,34,]),'MENOR':([17,18,19,20,21,28,37,39,42,43,44,45,46,47,48,50,],[35,-24,-25,-26,-27,35,35,-23,-16,-17,-18,-19,-20,-21,35,35,]),'IGUALQUE':([17,18,19,20,21,28,37,39,42,43,44,45,46,47,48,50,],[36,-24,-25,-26,-27,36,36,-23,-16,-17,-18,-19,-20,-21,-22,36,]),'PTCOMA':([18,19,20,21,39,42,43,44,45,46,47,48,49,50,],[-24,-25,-26,-27,-23,-16,-17,-18,-19,-20,-21,-22,53,54,]),'IGUAL':([23,24,25,26,27,],[38,-12,-13,-14,-15,]),'LLAVEIZQ':([29,],[41,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'initial':([0,],[1,]),'instructions':([0,41,],[2,51,]),'instruction':([0,2,41,51,],[3,10,3,10,]),'consoleLog':([0,2,41,51,],[4,4,4,4,]),'declaration':([0,2,41,51,],[5,5,5,5,]),'whileSt':([0,2,41,51,],[6,6,6,6,]),'exp':([13,16,22,30,31,32,33,34,35,36,38,],[17,28,37,42,43,44,45,46,47,48,50,]),'typeDef':([15,],[23,]),'block':([29,],[40,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> initial","S'",1,None,None,None),
  ('initial -> instructions','initial',1,'p_initial','Panther.py',119),
  ('instructions -> instructions instruction','instructions',2,'p_instructions','Panther.py',134),
  ('instructions -> instruction','instructions',1,'p_instructions','Panther.py',135),
  ('instruction -> consoleLog','instruction',1,'p_instruction','Panther.py',145),
  ('instruction -> declaration','instruction',1,'p_instruction','Panther.py',146),
  ('instruction -> whileSt','instruction',1,'p_instruction','Panther.py',147),
  ('block -> LLAVEIZQ instructions LLAVEDER','block',3,'p_block','Panther.py',153),
  ('block -> LLAVEIZQ LLAVEDER','block',2,'p_block','Panther.py',154),
  ('whileSt -> RWHILE PARIZQ exp PARDER block','whileSt',5,'p_whileSt','Panther.py',162),
  ('consoleLog -> CONSOLE PUNTO LOG PARIZQ exp PARDER PTCOMA','consoleLog',7,'p_consoleLog','Panther.py',167),
  ('declaration -> LET ID DOSPT typeDef IGUAL exp PTCOMA','declaration',7,'p_declaration','Panther.py',172),
  ('typeDef -> RSTRING','typeDef',1,'p_typeDef','Panther.py',180),
  ('typeDef -> RINT','typeDef',1,'p_typeDef','Panther.py',181),
  ('typeDef -> RFLOAT','typeDef',1,'p_typeDef','Panther.py',182),
  ('typeDef -> RBOOLEAN','typeDef',1,'p_typeDef','Panther.py',183),
  ('exp -> exp MAS exp','exp',3,'p_exp_aritmetica','Panther.py',192),
  ('exp -> exp MENOS exp','exp',3,'p_exp_aritmetica','Panther.py',193),
  ('exp -> exp MULTIPLICACION exp','exp',3,'p_exp_aritmetica','Panther.py',194),
  ('exp -> exp DIVISION exp','exp',3,'p_exp_aritmetica','Panther.py',195),
  ('exp -> exp MAYOR exp','exp',3,'p_exp_aritmetica','Panther.py',196),
  ('exp -> exp MENOR exp','exp',3,'p_exp_aritmetica','Panther.py',197),
  ('exp -> exp IGUALQUE exp','exp',3,'p_exp_aritmetica','Panther.py',198),
  ('exp -> PARIZQ exp PARDER','exp',3,'p_exp_agrupacion','Panther.py',209),
  ('exp -> ENTERO','exp',1,'p_exp_valor_entero','Panther.py',213),
  ('exp -> DECIMAL','exp',1,'p_exp_valor_decimal','Panther.py',218),
  ('exp -> STRING','exp',1,'p_exp_valor_string','Panther.py',223),
  ('exp -> ID','exp',1,'p_exp_variable','Panther.py',228),
]
